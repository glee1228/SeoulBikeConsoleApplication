package bikeseoul.view;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

import bikeseoul.controller.BikeController;
import bikeseoul.domain.BikeSeoulDTO;
import bikeseoul.domain.Location;
import bikeseoul.domain.Rent;
import bikeseoul.domain.Station;
import bikeseoul.model.BikeInput;

public class StartView {
	public static void main(String[] args) {
	BikeInput.ReadCSV();
	 int userChoice;
     MenuView View = new MenuView();
     Scanner input2 = new Scanner(System.in);
     String in;
     
		while (true) {
			userChoice = View.menu();
			switch (userChoice) {
			case 1:
				BikeController.all(); //전체 검색
				break;
			case 2:
				System.out.println("검색하려는 정류소 이름을 입력하세요");
				in = input2.nextLine();
				BikeController.getName(in); //이름으로 검색
				System.out.println("-------------------------------");
				System.out.println("직경 거리가 1mile이하인 정류소 정보입니다");
				System.out.println("-------------------------------");
				BikeController.getNear2(in);
				break;
			case 3:
				System.out.println("검색하려는 정류소 번호를 입력하세요");
				in= input2.nextLine();
				BikeController.getId(in); //번호로 검색
				System.out.println("-------------------------------");
				System.out.println("직경 거리가 1mile이하인 정류소 정보입니다");
				System.out.println("-------------------------------");
				BikeController.getNear(in);
				break;
			case 4:
				System.out.println("검색하려는 정류소 거치대 수를 입력하세요");
				in = input2.nextLine();
				BikeController.getHolder(in); //거치대 수로 검색
				break;
			case 5:
				System.out.println("좌표를 알고 싶은 정류소 번호를 입력하세요");
				in = input2.nextLine();
				BikeController.getLocation(in); //위치 좌표 검색
				System.out.println("-------------------------------");
				System.out.println("직경 거리가 1mile이하인 정류소 정보입니다");
				System.out.println("-------------------------------");
				BikeController.getNear(in);
				break;
			case 6:
				System.out.println("대여횟수와 반납 횟수를 알고 싶은 정류소 번호를 입력하세요");
				in = input2.nextLine();
				BikeController.getRental(in); //대여횟수와 반납횟수 검색
				break;
			case 7:
				System.out.println("삭제하려는 정류소 번호를 입력하세요");
				in = input2.nextLine();
				BikeController.DeleteOne(in); //삭제하기
				break;
			case 8:
				System.out.println("삭제하려는 정류소 이름을 입력하세요");
				in = input2.nextLine();
				BikeController.DeleteOne2(in); //삭제하기
				break;
			case 9:
				System.out.println("자전거 정보 수정하기");
				BikeController.UpdateOne("2", new BikeSeoulDTO("1", new Station("서대문구", "추가한데이터", "서울시서대문구", "10"),
						new Location(30.0, 30.0), new Rent(1000, 1000))); //수정하기
				break;
			case 10:
				System.out.println("새로운 자전거 정류소 정보 입력");
				BikeController.InsertOne(new BikeSeoulDTO("1", new Station("서대문구", "추가한데이터", "서울시서대문구", "10"),
						new Location(30.0, 30.0), new Rent(1000, 1000))); //추가하기
				break;
			case 11:
				System.out.println("프로그램 종료");
				System.exit(0);
				break;

			}
     /*
	System.out.println("******모두 검색******");
	//BikeController.all();
	//검색
	System.out.println("******정류소 이름으로 검색******");
	//BikeController.getName("학동역");
	System.out.println("******정류소 번호로 검색******");
	//BikeController.getId("101");
	System.out.println("******거치대 개수로 검색******");
	//BikeController.getHolder("10");
	System.out.println("******정류소 번호로 정류소 좌표(위도,경도)검색******");
	//BikeController.getLocation("10");
	System.out.println("******정류소 번호로 정류소 좌표(위도,경도)검색******");
	//BikeController.getRental("101");
	
	//삽입
	System.out.println("******정류소 번호로 해당 DTO 삽입******");
	//BikeController.InsertOne(new BikeSeoulDTO("1",new Station("서대문구","추가한데이터","서울시서대문구","10"),new Location(30.0,30.0),new Rent(1000,1000)));
	
	//수정
	System.out.println("*******정류소 번호로 해당 DTO 수정*******");
	//BikeController.UpdateOne("2",new BikeSeoulDTO("1",new Station("서대문구","추가한데이터","서울시서대문구","10"),new Location(30.0,30.0),new Rent(1000,1000)));
	
	//삭제
	System.out.println("********정류소 번호로 해당 정류소 정보 삭제********");
	//BikeController.DeleteOne("111");
	System.out.println("********정류소 번호로 해당 정류소 정보 삭제********");
	*/
	
	
	
	}
	}
}

